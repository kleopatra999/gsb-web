#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
%\usepackage{hyperref}

% provides missing characters,
% see note in chapter 'Character Tables'
%\usepackage{textcomp}

\usepackage{ifpdf} % part of the hyperref bundle
\ifpdf % if pdflatex is used

% set fonts for nicer pdf view
\IfFileExists{lmodern.sty}{\usepackage{lmodern}}{%
\usepackage[scaled=0.92]{helvet}
\usepackage{mathptmx}
\usepackage{courier} }
% the pages of the TOC are numbered roman
% and a pdf-bookmark for the TOC is added
\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
\pdfbookmark[1]{Contents}{}
\myTOC
\clearpage
\pagenumbering{arabic} }
% link all cross references and URLs in pdf output
\usepackage[colorlinks=true, bookmarks, bookmarksnumbered,
linkcolor=black, citecolor=black, urlcolor=blue, filecolor=blue,
pdfpagelayout=OneColumn, pdfnewwindow=true,
pdfstartview=XYZ, plainpages=false, pdfpagelabels,
pdfauthor={Chip Cuccio}, pdftex,
pdfkeywords={}]{hyperref}
\else % if dvi or ps is produced

% link all cross references and URLs in dvi output
\usepackage[ps2pdf]{hyperref}

% the pages of the TOC are numbered roman
\pagenumbering{roman}
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
\pdfbookmark[1]{Contents}{}
\myTOC
\clearpage
\pagenumbering{arabic} }
\fi 
\end_preamble
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 12
\spacing single
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
GNOME SlackBuild (GSB) Website Documentation
\end_layout

\begin_layout Author
Chip Cuccio 
\end_layout

\begin_layout Date
11/24/2007
\end_layout

\begin_layout Abstract
This document explains how the GNOME SlackBuild (GSB) website was developed,
 how it works, how to maintain it, etc.
 This document also contains other general site-related information for
 developers of the GSB project, as well as web/sysadmins assigned web-related
 duties.
 This document is 
\begin_inset Quotes eld
\end_inset

living
\begin_inset Quotes erd
\end_inset

 - in other words, a work-in-progress.
\end_layout

\begin_layout Standard
\begin_inset LatexCommand tableofcontents

\end_inset


\newpage

\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The GNOME SlackBuild (GSB) website was initially developed by Chip Cuccio
 in early 2005 as a 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 website.
 However, it didn't take long before we realized that we needed the site
 to be a bit more dynamic.
 At the same token, I really didn't want to deploy (or write) a CMS-type
 of app that used some DB back-end.
 I wanted tiny, fast, and simple.
 Really, the only key points of the website that are dynamic, are the news,
 version numbers, and changelogs, and the project TODOs.
\end_layout

\begin_layout Standard
So I custom-wrote a tiny 
\begin_inset Quotes eld
\end_inset

CMS
\begin_inset Quotes erd
\end_inset

 that uses flat files as its 
\begin_inset Quotes eld
\end_inset

DB
\begin_inset Quotes erd
\end_inset

.
 It's tiny, portable (and has been moved around from server-to-server a
 bunch!), and is simple for anyone to update content.
 Since 2005, it's the same code that's been in use (with a bunch of updates
 and revisions), and it still works well to this day,
\end_layout

\begin_layout Section
Why this document?
\end_layout

\begin_layout Standard
This document was written to help developers or web/sysadmins manage, maintain,
 and continue the active development of the GSB website.
 Because the site was custom-written, a good document explaining how everything
 works is necessary.
\end_layout

\begin_layout Section
How the site works
\end_layout

\begin_layout Subsection
Basic technical info
\end_layout

\begin_layout Standard
The GSB site's main 
\begin_inset Quotes eld
\end_inset

CMS engine
\begin_inset Quotes erd
\end_inset

 is written in PHP.
 The engine performs parsing/'includes' against basic HTML templates for
 the content/copy in the main sections of the website.
 There are some support scripts and programs, not directly related to content
 rendering, written in shell and PHP as well.
\end_layout

\begin_layout Standard
The GSB site was written with strict adherence to standards, as well as,
 with excellent accessibility and usability guidelines.
 The site renders it's output in XHTML 1.1 (modular), with MathML plus SVG
 extensions.
 Styling is handled by strict CSS 2.0, with no 
\begin_inset Quotes eld
\end_inset

IE hacks
\begin_inset Quotes erd
\end_inset

.
 Visitors of the site whom use IE will see the site just fine, but will
 not be graced with the styling the CSS renders.
 The site works perfectly in modern standards-compliant graphical browsers,
 as well as older legacy browsers.
 Additionally, the XHTML output renders beautifully in text-based browsers
 (`lynx`, etc.) and screen-readers.
 I designed the site intentionally, with forward-looking standards and structure
, but at the same token, it degrades nicely in non-graphical and legacy
 environments.
 Again, IE will see the site in a degraded text-only mode, simply because
 IE sucks ass, and I refuse to write CSS hacks so that it looks pretty in
 a shitty browser.
\end_layout

\begin_layout Standard
It is important to note, that since the site is rendered in XHTML 1.1, the
 content-type on the server side, serves the pages as 
\begin_inset Quotes eld
\end_inset

application/xhtml+xml
\begin_inset Quotes erd
\end_inset

.
 This creates even more strict-ness when writing web code - since one tiny
 malformation or syntax error will render the entire page unreadable by
 many browsers.
 
\emph on
All pages, all the time, should validate as 100% pure, valid XHTML 1.1
\emph default
 - always!
\end_layout

\begin_layout Standard
The chosen 
\begin_inset Quotes eld
\end_inset

LANG
\begin_inset Quotes erd
\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

charset
\begin_inset Quotes erd
\end_inset

) attribute used to serve the site, is UTF-8.
 No other character set will do.
 UTF-8/Unicode is great stuff, and it's the future.
\end_layout

\begin_layout Standard
All images on the site are in PNG format.
 No GIFs, no JPEGs, no TIFFs.
 Just PNGs.
 Larger documents are in plain text, PDF, or just HTML.
 Documents which were written in LaTeX or other typesetting apps, then rendered
 to other formats, must include the original source code in SVN.
 Even the images I've made have the source PSD files committed to SVN.
 Another good example is this very document: although it was exported to
 PDF, etc., it was written in LyX/LaTeX - hence, the source files are in
 SVN.
 
\emph on
Nothing in this site is closed-source
\emph default
.
 Ever.
 It's all in SVN for public review and consumption.
\end_layout

\begin_layout Subsubsection
Code review
\end_layout

\begin_layout Standard
It is highly recommended that anyone who wishes to help with the website,
 'checkout' the web code from SVN and perform a thorough code review.
 If you have a web server accessible locally, you can even use the GSB site
 on that to debug, work on, test, etc.
\end_layout

\begin_layout Subsection
Style guide
\end_layout

\begin_layout Standard
I'll try and keep this short and simple.
 But proper structure and semantics is of utmost importance when maintaining
 the GSB site.
 Here is the basic style guide I've used when writing/maintaining the GSB
 site:
\end_layout

\begin_layout Itemize
<h1> tags are reserved for the main site title and header.
 
\emph on
They cannot be used anywhere else
\emph default
, and no one should have to modify the pre-defined <h1> header.
\end_layout

\begin_layout Itemize
<h2> tags are reserved for page and (main) section headers.
 Every single page will have at least one <h2> tag.
 These can be modified and/or defined.
\end_layout

\begin_layout Itemize
<h3> through <h6> tags are used as sub-sections and nested sub-sections,
 and 
\emph on
must
\emph default
 have a 
\begin_inset Quotes eld
\end_inset

parent
\begin_inset Quotes erd
\end_inset

 tag/section above it.
 For example, you cannot use an <h3> tag for a page or main section header.
 Since <h2> tags are reserved for page and/or main section headers, <h3>
 must be structurally below <h2>, and so on.
 For the news section, news article titles are always enclosed in <h3> tags
 - and it's automatically done by the news rendering engine (more on that
 later).
\end_layout

\begin_layout Itemize
Ordered lists vs.
 unordered lists:
\newline
Ordered lists are normally used where chronology is important,
 or when prefacing text specifies an exact number of forthcoming items.
 If the intended content constitutes a list, 
\emph on
use a list
\emph default
.
 Of course, when appropriate, lists can be nested - even mixed nests (both
 ordered and unordered).
\end_layout

\begin_layout Itemize
Paragraphs: 
\newline
Any stand-alone body of text should be enclosed in <p> tags.
 Line-breaks (<br />) should be used conservatively.
 The use of <div> tags to enclose stand-alone blocks of text is strongly
 discouraged.
 If text within a paragraph or other block-level elements needs markup or
 styling, use <span> tags with class attributes.
\end_layout

\begin_layout Itemize
Definition lists: 
\newline
Definition lists should be used when specifying and defining
 terms, or when specifying figurative questions and providing answers (such
 as our FAQ on the website).
\end_layout

\begin_layout Itemize
Code and pre-formatted text:
\newline
All literal code must be enclosed in <code>
 and <pre> tags.
 Short snippets of code should be enclosed in <code> tags, while larger
 blocks of code should be enclosed in <pre> tags.
 
\emph on
Do not
\emph default
 enclose <pre> blocks of text within any other block-level element.
\end_layout

\begin_layout Itemize
HTML Entities:
\newline
Escape HTML entities! For example, 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 must be coded as &lt; - otherwise the page will be malformed and will not
 load in many user agents.
\end_layout

\begin_layout Itemize
URIs:
\newline
Links should never be verbs (e.g.: no 
\begin_inset Quotes eld
\end_inset

click here
\begin_inset Quotes erd
\end_inset

).
 Literal URIs, whether linked or unlinked should be enclosed within brackets
 - e.g.: <http://gnomeslackbuild.org>.
\end_layout

\begin_layout Itemize
Quotes:
\newline
Short quotes should always be wrapped in <q> tags.
 Never wrap quotes in quotation marks when using the <q> tag! For larger
 blocks of quotes, enclose them in <blockquote> tags.
 Additional block-level elements are permitted and within <blockquote> elements.
\end_layout

\begin_deeper
\begin_layout Itemize
Citing:
\newline
When using <q> and/or <blockquote> tags and quoting something/someone,
 if possible, utilize the 'cite' attribute within the tag.
\end_layout

\end_deeper
\begin_layout Itemize
Tables should only be used to present 
\emph on
tabular data
\emph default
.
 They are never to be used to handle/render layout.
 Ever!
\end_layout

\begin_layout Subsection
Site layout
\end_layout

\begin_layout Standard
The layout of the site is quite simple:
\end_layout

\begin_layout Itemize
Homepage
\end_layout

\begin_layout Itemize
Sections
\end_layout

\begin_deeper
\begin_layout Itemize
Subsections
\end_layout

\end_deeper
\begin_layout Standard
And that's about it.
 I try to keep sections only two levels deep maximum, so not to lose folks.
 There's no search facility on the site, because it's so small, and because
 Google can do it anyway.
\end_layout

\begin_layout Section
Helping with the site
\end_layout

\begin_layout Standard
I won't get into detail as to how the site's CMS engine works, because as
 a web hacker, it's your job to figure it out.
 Folks not familiar with PHP/HTML/CSS/etc.
 should not express interest in maintaining the site - 'cause you'll just
 be denied.
 We need experienced folks to help.
\end_layout

\begin_layout Standard
But I will cover a few basic, yet important aspect of the site, where maintainin
g content and a few other things is ridiculously easy.
\end_layout

\begin_layout Subsection
News
\end_layout

\begin_layout Standard
On the landing/home page, there's a news section (and it's also in it's
 own main section - for archival purposes).
 All of those articles are handled and maintained in a flat text file within
 the <docroot> of the site: 
\begin_inset Quotes eld
\end_inset

news.txt
\begin_inset Quotes erd
\end_inset

.
 News is displayed on the site in reverse-chronological order (newest entry
 first).
 It's very simple to edit/add news; by editing that one small news.txt file.
\end_layout

\begin_layout Standard
The file is a specially-formatted text file, and is parsed by some PHP functions
 to display nice and cleanly on the site.
\end_layout

\begin_layout Standard
The format of the news.txt file is as follows:
\end_layout

\begin_layout LyX-Code
###
\end_layout

\begin_layout LyX-Code
date-time
\end_layout

\begin_layout LyX-Code
title of news entry
\end_layout

\begin_layout LyX-Code
body of news entry
\end_layout

\begin_layout Standard
The "###" text, is actually a separator, so that the PHP news function knows
 to parse that as one entire "article".
 The body section of the news entry accepts HTML, but that is the only place
 HTML is used.
 URIs are automatically made as links.
 To reference an internal URI, one must use the following format:
\end_layout

\begin_layout LyX-Code
<a href="/foo/">See the foo section</a>
\end_layout

\begin_layout Standard
Hint: Internal URIs /never/ use "http://" - ever.
 Reference them to the base/root of the site, as shown in the above example.
\end_layout

\begin_layout Standard
Just open the <svnroot>/web/news.txt file for actual live examples used on
 the site.
\end_layout

\begin_layout Subsubsection
News style guide
\end_layout

\begin_layout Standard
The news articles actually have their own style, and it's consistent.
 It is important to note, that news articles are automatically enclosed
 within HTML block-level elements.
 However, you still must enclose blocks of text/paragraphs in block-level
 elements (mainly, "<p>").
 Lists, are OK - but header tags are not.
 The site news engine will handle everything else for you.
\end_layout

\begin_layout Subsection
Screenshots
\end_layout

\begin_layout Standard
Screenshots are placed in 
\family typewriter
`<webroot>/screenies`
\family default
.
 Then, a simple shell script takes care of resizing, creating thumbnails,
 and adding everything to the screenshots page.
 After screenshots have been dropped into the proper directory run:
\end_layout

\begin_layout LyX-Code
cd ../support-scripts
\end_layout

\begin_layout LyX-Code
./make-GSB-thumbs.sh
\end_layout

\begin_layout Standard
And that's it.
 Commit the changes to SVN, sync to staging, and make sure the screenshots
 page/section looks and works OK (i.e.: New thumbnails should now appear on
 the page.
 Thumbnails should be clickable links to full-size images.
 Full-size images should be in the ballpark of ~800x600 resolution.)
\end_layout

\begin_layout Subsection
Version numbers
\end_layout

\begin_layout Standard
Version numbers are used all over the site for our project.
 But they only need to be maintained/specified in one tiny file:
\newline
<svnroot>/web/ve
rsions.txt
\end_layout

\begin_layout Standard
The legend for the version numbers is explained in the header of that file.
 To reference version numbers in the site templates (
\begin_inset Quotes eld
\end_inset

<svnroot>/web/content/foo.html"):
\end_layout

\begin_layout Itemize

\family typewriter
<?php echo $gsb_bin_stable_ver; ?>
\family default

\newline
References the GSB actual stable binary release (tracks GNOME ver.)
\end_layout

\begin_layout Itemize

\family typewriter
<?php echo $gsb_source_ver; ?>
\family default

\newline
References the GSB source release.
 ...and so on (see <svnroot>web/common/versions_inc.php for all variables).
\end_layout

\begin_layout Subsection
Getting SVN commit access to the site
\end_layout

\begin_layout Standard
We don't just let any Tom Dick and Harry have SVN commit access to the site.
 You must prove yourself first by submitting patches, etc.
 Once we've learned to trust you and your work, you'll likely be granted
 SVN commit access to maintain the site.
\end_layout

\begin_layout Standard
Developing/maintaining the GSB website is a three step process:
\end_layout

\begin_layout Enumerate
Develop and commit to <svnroot>/web
\end_layout

\begin_layout Enumerate
Sync the <svnroot>/web code to the staging site for testing, review, and
 approval.
\end_layout

\begin_layout Enumerate
Migrate staging to production
\end_layout

\begin_layout Standard
Under no circumstances is the staging environment to be used as the development
 environment.
 Development occurs on your own server/workstations.
 Staging is where we test and approve before pushing to production.
\end_layout

\begin_layout Standard
Even to migrate the SVN web code to the staging site, you must be granted
 access.
\end_layout

\begin_layout Standard
To migrate SVN web code to the staging site, we use a web-based facility
 (written by yours truly): <
\begin_inset LatexCommand url
target "http://admin.gnomeslackbuild.org"

\end_inset

>.
 It's locked down, and web developers we can trust will be granted access
 to the facility.
\end_layout

\begin_layout Standard
At the moment, code migrations to the production site are handled by me
 once it's been approved.
 I'm very picky about the site functionality and the look-n-feel, it's just
 the way it works for now.
\end_layout

\begin_layout Section
Open to suggestions
\end_layout

\begin_layout Standard
I should close saying that I'm always open to suggestions.
 I may dismiss most of them, though.
 All kidding aside, I embrace ideas, feedback, and web/code hackers to help
 make and keep this site as cool as the project it hosts.
 Thanks.
\end_layout

\end_body
\end_document
